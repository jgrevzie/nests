





= render "errors"

= form_for @completed_proc, 
           html: {'parsley-validate'=>'', 'parsley-trigger'=>'change'} do |f|
  %fieldset
    .fields= f.label :proc_name, "Procedure Name"
    .fields= f.text_field :proc_name, 'parsley-required'=>true, 'parsley-validproc'=>true
    .fields= f.label :date, 'Date'
    .fields= f.text_field :date, 'parsley-required' => true
    .fields= f.label :quantity, 'How many of these procedures?'
    .fields= f.number_field :quantity, 'parsley-required'=>true, 'parsley-min'=>1, 
            'parsley-max'=>CP::MAX_PROCS_PER_DAY
    .fields= f.label :comments
    .fields= f.text_area :comments, cols: 40, rows: 4
    = f.label :emergency, 'Emergency?'
    = f.check_box :emergency
    .fields#role
      Role in this proc:
      - CP::ROLES.each do |r|
        %label
          = f.radio_button :role, r, 'parsley-required'=>true, 
                           'parsley-error-message'=>'Choose the role you played in the procedure.',
                           'parsley-error-container'=>'#roleErrors'
          = r
      #roleErrors
    #options
      = render 'options', options: @completed_proc.proc.options if @completed_proc.proc
  - if @nurse.validator? && editing then
    Validate this procedure?
    %label
      Validate
      = f.radio_button :status, CompletedProc::VALID, checked:true
    %label
      Reject
      = f.radio_button :status, CompletedProc::REJECTED
    %br

  = f.submit 'Acknowledge', id: 'ack' if @completed_proc.rejected?
  = f.submit id: 'submit'

:css
  #ack {
    color: red
  }

:javascript
  PROCID = '#completed_proc_proc_name'
  proc_list = #{render 'autocomplete_list', nurse: @nurse}

  function loadOptions() {
    $('#options').load( "#{options_completed_proc_path(@completed_proc._id)}",
                        "proc="+encodeURIComponent( $(PROCID).val() ) );
  }
  function procIndex(name) {
    return $.inArray( name.toLowerCase(), 
                      proc_list.map( function(i) { return i.toLowerCase() }) );

  }
  function fixCase() {
    index = procIndex( $(PROCID).val() );
    if ( index != -1 ) $(PROCID).val(proc_list[index]);
  }

  $('#new_completed_proc').parsley( {
    validators: {
      validproc: function() {
        return {
          validate: function(val) { 
            return procIndex(val) != -1
          },
          priority: 2
        };
      }
    }
    ,messages: {
      validproc: "Enter the name of a procedure."
    }
  });
  
  $(PROCID).autocomplete({
    source: proc_list,
    select: function( event, ui ) { 
      $(PROCID).val(ui.item.value);
      loadOptions();
    },
    minLength: 0,
    change: function(event, ui) { fixCase() } 
  });
  
  $(PROCID).change( loadOptions )
  
  $("#completed_proc_date").datepicker({
    #{@nurse.validator ? '' : 'minDate: -8, maxDate: +1,'}
    dateFormat: "dd/mm/yy" });
